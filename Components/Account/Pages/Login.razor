@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TyphoonTaskingTool.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudPaper Class="display-6 mx-auto mt-8" Elevation="4" MaxWidth="500px">
    <MudText Typo="Typo.h4" GutterBottom="true">Log In</MudText>
    <MudForm Model="@Input" @ref="_form" OnValidSubmit="LoginUser">
        <MudAlert Severity="Severity.Error" Dense="true" Elevation="0" Variant="Variant.Text" Class="mb-4" Text="@errorMessage"/>
        <MudTextField @bind-Value="Input.Email"
                        Label="Email Address"
                        Placeholder="name@finalproject.com"
					  Required="true"
					  Immediate="true"
                      Margin="Margin.Normal"
					  InputType="InputType.Email"
                      Class="mb-3"
                      For="() => Input.Email"/>
		<MudTextField @bind-Value="Input.Password"
                        Label="Password"
                        Placeholder="**********"
					  Required="true"
                      Margin="Margin.Normal"
                      InputType="InputType.Password"
                      Class= "mb-3"
                      For="() => Input.Password"/>
		<MudCheckBox @bind-Value="Input.RememberMe" 
                        Label="Keep me Logged in"
                        Class="mb-3"/>
		<MudButton Type="submit" Color="Color.Primary" Variant="Variant.Filled" Class="w-100 mb-3">Log in</MudButton>
        <MudStack Spacing="1">
			<MudNavLink Href="Account/ForgotPassword" Class="text-decoration-none">Forgot your password?</MudNavLink>
        </MudStack>
    </MudForm>
</MudPaper>

<MudPaper Class="display-6 mx-auto mt-6" Elevation="2" MaxWidth="500px">
    <MudText Typo="Typo.h4" GutterBottom="true">Log in with an external provider</MudText>
	<ExternalLoginPicker />
</MudPaper>

@code {
    private string? errorMessage;

    private MudForm _form;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if (_form.IsValid) {

            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                    "Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
