@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TyphoonTaskingTool.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudPaper Class="display-6 mx-auto mt-8" Elevation="4" MaxWidth="500px">
    <MudText Typo="Typo.h4" GutterBottom="true">Log In</MudText>
    <EditForm Model="Input"  OnValidSubmit="LoginUser" FormName="login">
        
        <MudTextField @bind-Value="Input.Email"
                        Label="Email Address"
                        Placeholder="name@finalproject.com"
                        name="Input.Email"
					  Required="true"
					  Immediate="true"
                      Margin="Margin.Normal"
					  InputType="InputType.Email"
                      Class="mb-3"
                      For="() => Input.Email"/>
		<MudTextField @bind-Value="Input.Password"
                        Label="Password"
                        Placeholder="**********"
                      name="Input.Password"
					  Required="true"
                      Margin="Margin.Normal"
                      InputType="InputType.Password"
                      autocomplete="new-password"             
                      Class= "mb-3"
                      For="() => Input.Password"/>
		<MudCheckBox @bind-Value="Input.RememberMe" 
                        Label="Keep me Logged in"
                        Class="mb-3"
                        name="Input.RememberMe" />
        <MudButtonGroup>
            <MudButton StartIcon="@Icons.Material.TwoTone.Login"
                           Color="Color.Primary"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           ButtonType="ButtonType.Submit"
                           >LOG IN </MudButton>
            <MudButton StartIcon="@Icons.Material.TwoTone.Cancel"
                           Color="Color.Secondary"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Href="/"
                           >CANCEL</MudButton>
            <MudButton StartIcon="@Icons.Material.TwoTone.Password"
                       Color="Color.Secondary"
                       Variant="Variant.Text"
                       Size="Size.Medium"
                       Href="Account/ForgotPassword">Forgot Password</MudButton>
        </MudButtonGroup>
    </EditForm>
</MudPaper>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    

    public async Task LoginUser()
    {
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }        
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
