@page "/requests/edit"
@using Microsoft.EntityFrameworkCore
@using TyphoonTaskingTool.Models
@inject IDbContextFactory<TyphoonTaskingTool.Data.TmscDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Request</h2>
<hr />
@if (Request is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Request" OnValidSubmit="UpdateRequest" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Request.RequestTaskId" value="@Request.RequestTaskId" />
                <div class="mb-3">
                    <label for="requestshortid" class="form-label">RequestShortId:</label>
                    <InputText id="requestshortid" @bind-Value="Request.RequestShortId" class="form-control" />
                    <ValidationMessage For="() => Request.RequestShortId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestcreated" class="form-label">RequestCreated:</label>
                    <InputDate id="requestcreated" @bind-Value="Request.RequestCreated" class="form-control" />
                    <ValidationMessage For="() => Request.RequestCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="rankid" class="form-label">RankId:</label>
                    <InputNumber id="rankid" @bind-Value="Request.RankId" class="form-control" />
                    <ValidationMessage For="() => Request.RankId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestfirstname" class="form-label">RequestFirstName:</label>
                    <InputText id="requestfirstname" @bind-Value="Request.RequestFirstName" class="form-control" />
                    <ValidationMessage For="() => Request.RequestFirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestlastname" class="form-label">RequestLastName:</label>
                    <InputText id="requestlastname" @bind-Value="Request.RequestLastName" class="form-control" />
                    <ValidationMessage For="() => Request.RequestLastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestemailadd" class="form-label">RequestEmailAdd:</label>
                    <InputText id="requestemailadd" @bind-Value="Request.RequestEmailAdd" class="form-control" />
                    <ValidationMessage For="() => Request.RequestEmailAdd" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestcontactphone" class="form-label">RequestContactPhone:</label>
                    <InputText id="requestcontactphone" @bind-Value="Request.RequestContactPhone" class="form-control" />
                    <ValidationMessage For="() => Request.RequestContactPhone" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitid" class="form-label">UnitId:</label>
                    <InputNumber id="unitid" @bind-Value="Request.UnitId" class="form-control" />
                    <ValidationMessage For="() => Request.UnitId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="teamid" class="form-label">TeamId:</label>
                    <InputNumber id="teamid" @bind-Value="Request.TeamId" class="form-control" />
                    <ValidationMessage For="() => Request.TeamId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requesttitle" class="form-label">RequestTitle:</label>
                    <InputText id="requesttitle" @bind-Value="Request.RequestTitle" class="form-control" />
                    <ValidationMessage For="() => Request.RequestTitle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requesttaskdescription" class="form-label">RequestTaskDescription:</label>
                    <InputText id="requesttaskdescription" @bind-Value="Request.RequestTaskDescription" class="form-control" />
                    <ValidationMessage For="() => Request.RequestTaskDescription" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="statusid" class="form-label">StatusId:</label>
                    <InputNumber id="statusid" @bind-Value="Request.StatusId" class="form-control" />
                    <ValidationMessage For="() => Request.StatusId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requestarchive" class="form-label">RequestArchive:</label>
                    <MudCheckBox T="bool" id="requestarchive" @bind-Checked="Request.RequestArchive" class="form-check-input" />
                    <ValidationMessage For="() => Request.RequestArchive" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/requests">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private Guid RequestTaskId { get; set; }

    [SupplyParameterFromForm]
    private Request? Request { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Request ??= await context.Requests.FirstOrDefaultAsync(m => m.RequestTaskId == RequestTaskId);

        if (Request is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateRequest()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Request!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RequestExists(Request!.RequestTaskId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/requests");
    }

    private bool RequestExists(Guid requesttaskid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Requests.Any(e => e.RequestTaskId == requesttaskid);
    }
}
