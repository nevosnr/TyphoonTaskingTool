@page "/requests"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TyphoonTaskingTool.DTOs
@using TyphoonTaskingTool.Models
@using TyphoonTaskingTool.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TyphoonTaskingTool.Data.TmscDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<MudText Align="MudBlazor.Align.End" Typo="Typo.h3">FULL LIST OF TASKS</MudText>

<style>
    .blur-on-diag-open {
        backdrop-filter: blur(5px);
    }
</style>


<MudTable Items="_requests">
    <HeaderContent>
        <MudTh Style="text-align:center">Rank</MudTh>
        <MudTh Style="text-align:center">First Name</MudTh>
        <MudTh Style="text-align:center">Last Name</MudTh>
        <MudTh Style="text-align:center">Email</MudTh>
        <MudTh Style="text-align:center">Phone</MudTh>
        <MudTh Style="text-align:center">Title</MudTh>
        <MudTh Style="text-align:center">Description</MudTh>
        <MudTh Style="text-align:center">Status</MudTh>
        <MudTh Style="text-align:center">Actions</MudTh>
 
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Rank">@context.RankShortName</MudTd>
        <MudTd DataLabel="First Name">@context.RequestFirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.RequestLastName</MudTd>
        <MudTd DataLabel="Email">@context.RequestEmailAdd</MudTd>
        <MudTd DataLabel="Phone">@context.RequestContactPhone</MudTd>
        <MudTd DataLabel="Title">@context.RequestTitle</MudTd>
        <MudTd DataLabel="Description">@context.RequestTaskDescription</MudTd>
        <MudTd DataLabel="Status"><MudChip T="string" Disabled="true" Color="Color.Primary">@context.StatusName</MudChip></MudTd>
		
        <MudTd DataLabel="Actions">
            <MudButtonGroup>
                <MudIconButton Icon="@Icons.Material.TwoTone.Visibility"
                               Color="Color.Primary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => ViewRequest(context.RequestTaskId))"
                               AriaLabel="View Details" />
			    <MudIconButton Icon="@Icons.Material.TwoTone.Edit"
						       Color="Color.Secondary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => EditRequest(context.RequestTaskId))"  
						       AriaLabel="Edit Request" />
                <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                               Color="Color.Secondary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => SoftDeleteTask(context.RequestTaskId))" 
                               AriaLabel="Edit Request" />
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<RequestsDTO> _requests = new();
    private TmscDbContext _context = default!;

    protected override async Task OnInitializedAsync()
    {
        await RefreshRequestsAsync();
    }

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();

    private async Task SoftDeleteTask(Guid taskId)
    {
        Console.WriteLine("Soft delete task will add archive flag to task NO REAL DELETE!");

        var task = _requests.FirstOrDefault(x => x.RequestTaskId == taskId);

        if (task != null)
        {
            task.RequestArchive = true;
            await _context.SaveChangesAsync();
            await RefreshRequestsAsync();

        }

        StateHasChanged();
    }

    private async Task ViewRequest(Guid taskId)
    {
        //Set the correct Task ID
        var parameters = new DialogParameters
        {
            ["RequestTaskId"] = taskId,
        };

        //Options associated with the dialog popup
        var options = new DialogOptions
        {
            BackgroundClass = "blur-on-diag-open",
            CloseButton = false, //Close cross in top right of dialog
            MaxWidth = MaxWidth.Large, //Limits of window width its Dynamic
            FullWidth = true // if omited or false will shrink dialog to width of text fields
		};

        //Asyncronsly show dialog box (DetailsDialog componnet) with task details and set params as above.
        await DialogService.ShowAsync<DetailsDialog>("Request Details", parameters, options);
    }

    private async Task EditRequest(Guid taskId)
    {
        //Creating an edit dialog repeats the same as view dialog.
        var parameters = new DialogParameters
        {
            ["RequestTaskId"] = taskId,
		};

        var options = new DialogOptions
        {
            BackgroundClass = "blur-on-diag-open",
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true
        };

        await DialogService.ShowAsync<EditDialog>("Edit Request", parameters, options);
    }

    //Refresh of the UI could lead to duplicated code so it has been abstracted to its own function.
    private async Task RefreshRequestsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _context = DbFactory.CreateDbContext();

        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                bool _isAdmin = user.IsInRole("Administrator");
                var userEmail = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

                if (_isAdmin)
                {
					// Using LINQ to join Requests with LookupRanks and LookupStatuses
                    _requests = await (from r in _context.Requests
                                       join rk in _context.LookupRanks on r.RankId equals rk.RankId
                                       join stat in _context.LookupStatuses on r.StatusId equals stat.StatusId
                                       select new RequestsDTO
                                       {
                                            RequestTaskId = r.RequestTaskId,
                                            RequestShortId = r.RequestShortId,
                                            RequestCreated = r.RequestCreated,
                                            RankId = rk.RankId,
                                            RankShortName = rk.RankNameShort,
                                            RequestFirstName = r.RequestFirstName,
                                            RequestLastName = r.RequestLastName,
                                            RequestEmailAdd = r.RequestEmailAdd,
                                            RequestContactPhone = r.RequestContactPhone,
                                            UnitId = r.UnitId,
                                            TeamId = r.TeamId,
                                            RequestTitle = r.RequestTitle,
                                            RequestTaskDescription = r.RequestTaskDescription,
                                            StatusName = stat.StatusName,
										    RequestArchive = r.RequestArchive
                                       }).ToListAsync();
                }
                else if (!string.IsNullOrWhiteSpace(userEmail))
                {
                    _requests = await (from r in _context.Requests
                                       join rk in _context.LookupRanks on r.RankId equals rk.RankId
                                       join stat in _context.LookupStatuses on r.StatusId equals stat.StatusId
                                       where r.RequestEmailAdd == userEmail && (r.RequestArchive == false || r.RequestArchive == null)
                                       select new RequestsDTO
                                       {
                                           RequestTaskId = r.RequestTaskId,
                                           RequestShortId = r.RequestShortId,
                                           RequestCreated = r.RequestCreated,
                                           RankId = rk.RankId,
                                           RankShortName = rk.RankNameShort,
                                           RequestFirstName = r.RequestFirstName,
                                           RequestLastName = r.RequestLastName,
                                           RequestEmailAdd = r.RequestEmailAdd,
                                           RequestContactPhone = r.RequestContactPhone,
                                           UnitId = r.UnitId,
                                           TeamId = r.TeamId,
                                           RequestTitle = r.RequestTitle,
                                           RequestTaskDescription = r.RequestTaskDescription,
                                           StatusName = stat.StatusName,
                                           RequestArchive = r.RequestArchive
                                           
									   }).ToListAsync();
                }
            }
        }
    }
}
