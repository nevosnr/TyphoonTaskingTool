@page "/requests"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TyphoonTaskingTool.Models
@using TyphoonTaskingTool.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TyphoonTaskingTool.Data.TmscDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<MudText Align="MudBlazor.Align.End" Typo="Typo.h3">Full List Of Tasks</MudText>

<style>
    .blur-on-diag-open {
        backdrop-filter: blur(5px);
    }
</style>


<MudTable Items="_requests" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh Style="text-align:center">Short ID</MudTh>
        <MudTh Style="text-align:center">Created</MudTh>
        <MudTh Style="text-align:center">Rank</MudTh>
        <MudTh Style="text-align:center">First Name</MudTh>
        <MudTh Style="text-align:center">Last Name</MudTh>
        <MudTh Style="text-align:center">Email</MudTh>
        <MudTh Style="text-align:center">Phone</MudTh>
        <MudTh Style="text-align:center">Title</MudTh>
        <MudTh Style="text-align:center">Description</MudTh>
        <MudTh Style="text-align:center">Status</MudTh>
        <MudTh Style="text-align:center">Archive</MudTh>
        <MudTh Style="text-align:center">Actions</MudTh>
 
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Short ID">@context.RequestShortId</MudTd>
        <MudTd DataLabel="Created">@context.RequestCreated</MudTd>
        <MudTd DataLabel="Rank">@context.RankId</MudTd>
        <MudTd DataLabel="First Name">@context.RequestFirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.RequestLastName</MudTd>
        <MudTd DataLabel="Email">@context.RequestEmailAdd</MudTd>
        <MudTd DataLabel="Phone">@context.RequestContactPhone</MudTd>
        <MudTd DataLabel="Title">@context.RequestTitle</MudTd>
        <MudTd DataLabel="Description">@context.RequestTaskDescription</MudTd>
        <MudTd DataLabel="Status">@context.StatusId</MudTd>
        <MudTd DataLabel="Archive">@context.RequestArchive</MudTd>
        <MudTd DataLabel="Actions">
            <MudButtonGroup>
                <MudIconButton Icon="@Icons.Material.TwoTone.Visibility"
                               Color="Color.Primary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => ViewRequest(context.RequestTaskId))"
                               AriaLabel="View Details" />
			    <MudIconButton Icon="@Icons.Material.TwoTone.Edit"
						       Color="Color.Secondary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => Console.WriteLine("Testing limit"))"  
						       AriaLabel="Edit Request" />
                <MudIconButton Icon="@Icons.Material.TwoTone.Delete"
                               Color="Color.Secondary"
                               Variant="Variant.Text"
                               Size="Size.Small"
                               OnClick="@(() => Console.WriteLine("Exterminate"))" 
                               AriaLabel="Edit Request" />
            </MudButtonGroup>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<Request> _requests = new();
    private TmscDbContext _context = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _context = DbFactory.CreateDbContext();

        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                bool _isAdmin = user.IsInRole("Administrator");
                var userEmail = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;

                IQueryable<Request> query = _context.Requests;

                if (!_isAdmin && !string.IsNullOrWhiteSpace(userEmail))
                {
                    query = query.Where(r => r.RequestEmailAdd == userEmail);
                }

                _requests = await query.ToListAsync();
            }            
        }
    }

    public async ValueTask DisposeAsync() => await _context.DisposeAsync();

    private async Task ViewRequest(Guid taskId)
    {
        //Set the correct Task ID
        var parameters = new DialogParameters
        {
            ["RequestTaskId"] = taskId,
        };

        //Options associated with the dialog popup
        var options = new DialogOptions
        {
            BackgroundClass = "blur-on-diag-open",
            CloseButton = true, //Close cross in top right of dialog
            MaxWidth = MaxWidth.Large, //Limits of window width its Dynamic
            FullWidth = true // if omited or false will shrink dialog to width of text fields
		};

        //Asyncronsly show dialog box (DetailsDialog componnet) with task details and set params as above.
		await DialogService.ShowAsync<DetailsDialog>("Request Details", parameters, options);
    }

}
