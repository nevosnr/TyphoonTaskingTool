@page "/requests/create"
@using Microsoft.EntityFrameworkCore
@using TyphoonTaskingTool.DTOs
@using TyphoonTaskingTool.Models
@using TyphoonTaskingTool.Services
@inject IDbContextFactory<TyphoonTaskingTool.Data.TmscDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ILookupRankService LookupRankService
@inject ILookupUnitService LookupUnitService

<PageTitle>Task the MSC</PageTitle>

<h1>Create Request</h1>

<MudText Typo="Typo.body1" Class="mb-4">
	Use this form to create a new task request for the MSC. Ensure all details are filled out correctly.
    If you wish to track the progression of your task you should register for an account.</MudText>

<MudForm @ref="_form" Model="@Request" @bind-IsValid="_isValid" @bind-Errors="_errors">
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudText Typo="Typo.h6">Requester Details</MudText>
        <MudGrid>
            <MudItem xs="4" sm="3">
                <MudSelect T="int?" Label="Rank" @bind-Value="Request.RankId" Placeholder="Select Rank" Variant="Variant.Outlined">
                    @if (_rankList != null)
                    {
                        @foreach (LookupRankDTO i in _rankList)
                        {
                            @*https://stackoverflow.com/questions/77010964/trying-to-understand-how-to-use-mudselect-with-a-list*@
                            @*Key was to explictly define the type with T="int?"*@
                            <MudSelectItem T="int?" Value="@i.RankId">@i.RankNameShort: @i.RankNameLong</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4">
                <MudTextField Label="First Name" @bind-Value="Request.RequestFirstName" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="4" sm="5">
                <MudTextField Label="Last Name" @bind-Value="Request.RequestLastName" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="int?" Label="Unit" @bind-Value="Request.UnitId" Placeholder="Select Unit" Variant="Variant.Outlined">
                    @if (_unitList != null)
                    {
                        @foreach (LookupUnitDTO i in _unitList)
                        {
                            <MudSelectItem T="int?" Value="@i.UnitId">@i.UnitNameShort: @i.UnitNameLong</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Contact Number" @bind-Value="Request.RequestContactPhone" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Contact Email" @bind-Value="Request.RequestEmailAdd" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudText Typo="Typo.h6">Task Details</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Select Date:" @bind-bind-Date="Request.RequestCreated" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Task Title" @bind-Value="Request.RequestTitle" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudTextField Label="Task Description" @bind-Value="Request.RequestTaskDescription" Variant="Variant.Outlined" Lines="10" AutoGrow="true" />
            </MudItem>
        </MudGrid>
    </MudPaper>
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-center">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton OnClick="SubmitForm" Color="Color.Primary" Variant="Variant.Filled">Create Request</MudButton>
                <MudButton Href="/requests" Color="Color.Secondary" Variant="Variant.Filled">Back to List</MudButton>
            </MudButtonGroup>
        </MudItem>
    </MudGrid>

</MudForm>

@code {

    private MudForm? _form;
    private bool _isValid;
    private string[] _errors = Array.Empty<string>();

    [SupplyParameterFromForm]
    private RequestsDTO Request { get; set; } = new();

    private async Task SubmitForm()
    {
        await _form.Validate();

        using var context = DbFactory.CreateDbContext();
        var entity = new Models.Request
        {
            RequestShortId = Request.RequestShortId,
            RequestCreated = Request.RequestCreated,
            RankId = Request.RankId,
            RequestFirstName = Request.RequestFirstName,
            RequestLastName = Request.RequestLastName,
            RequestEmailAdd = Request.RequestEmailAdd,
            RequestContactPhone = Request.RequestContactPhone,
            UnitId = Request.UnitId,
            TeamId = Request.TeamId,
            RequestTitle = Request.RequestTitle,
            RequestTaskDescription = Request.RequestTaskDescription,
            StatusId = Request.StatusId,
            RequestArchive = Request.RequestArchive
        };

        context.Requests.Add(entity);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/requests");

    }

    private List<LookupRankDTO> _rankList = new();
    private List<LookupUnitDTO> _unitList = new();

    private void OnRankChanged(int? value)
    {
        Request.RankId = value;
    }

    protected override async Task OnInitializedAsync()
    {
        var ranks = await LookupRankService.GetAllOrderedAsync();
        _rankList = ranks ?? new();

        var units = await LookupUnitService.GetAllOrderedAsync();
        _unitList = units ?? new();
    }
}
