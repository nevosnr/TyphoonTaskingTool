@using Microsoft.EntityFrameworkCore
@using TyphoonTaskingTool.DTOs
@using TyphoonTaskingTool.Data
@using TyphoonTaskingTool.Models
@inject IDbContextFactory<TmscDbContext> DbFactory
@inherits OwningComponentBase<TmscDbContext>

<MudDialog>
	<DialogContent>
		@if (_request == null)
		{
			<MudProgressCircular Indeterminate="true" />
			<MudText Typo="Typo.body1">Loading request details...</MudText>
		}
		else
		{
			<MudCard>
				<MudCardContent>
					<MudForm>
						<MudPaper Class="pa-4 mb-4" Elevation="1">
							<MudGrid>
								<MudItem xs="4" sm="4">
									<MudTextField Label="Task Number" Variant="Variant.Outlined" @bind-Value="_request.RequestTaskId" Disabled="true" />
								</MudItem>
								<MudItem xs="4" sm="3">
									<MudTextField Label="Rank" Variant="Variant.Outlined" @bind-Value="_request.RankId" Disabled="true" />
								</MudItem>
								<MudItem xs="4" sm="3">
									<MudTextField Label="Last Name" Variant="Variant.Outlined" @bind-Value="_request.RequestLastName" Disabled="true" />
								</MudItem>
								<MudItem>
									<MudDivider />
								</MudItem>
								<MudItem xs="12" sm="12">
									<MudTextField Label="Task Title" Variant="Variant.Outlined" Disabled="true" @bind-Value="_request.RequestTitle" />
								</MudItem>
								<MudItem xs="12" sm="12">
									<MudTextField Label="Task Description" Variant="Variant.Outlined" Disabled="true" @bind-Value="_request.RequestTaskDescription" />
								</MudItem>
							</MudGrid>
							<MudDivider />
							<MudGrid>
								<MudItem xs="12" sm="12">
									<MudText Typo="Typo.h6">Update History: </MudText>
								</MudItem>
								<MudItem>
									<MudList T="string">
										@foreach (var update in _viewUpdates)
										{
											<MudListItem>
												<MudText Typo="Typo.body1">@($"{update.UpdateTimeStamp:g} - {update.UpdateBy}:")</MudText>
												<MudText Typo="Typo.body2">@($"{update.UpdateDescription}")</MudText>
											</MudListItem>
										}
										@if (!_viewUpdates.Any())
										{
											<MudListItem>
												<MudText Typo="Typo.body2">No updates available for this request.</MudText>
											</MudListItem>
										}
									</MudList>
								</MudItem>
							</MudGrid>
							<MudDivider />
						</MudPaper>						
					</MudForm>
				</MudCardContent>
			</MudCard>
		}
	</DialogContent>
	<DialogActions>
		<MudButtonGroup>
			<MudIconButton Icon="@Icons.Material.TwoTone.Close"
						   Color="Color.Primary"
						   Variant="Variant.Text"
						   Size="Size.Small"
						   OnClick="CloseDialog"
						   AriaLabel="View Details" />
		</MudButtonGroup>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
	//Param passed from Index.razor ViewRequest()
	[Parameter] public Guid RequestTaskId { get; set; }

	private Request? _request;

	private List<RequestUpdatesDTO> _viewUpdates = new();

	//performs actions when component is first loaded.
	//Here is is setting the private _request variable (of type Request) to the returned value of RequestTaskId
	//A null check is performed within the componnet and will infinitely loop a 'loading' animation
	protected override async Task OnInitializedAsync()
	{
		await using var ctx = await DbFactory.CreateDbContextAsync();
		_request = await ctx.Requests.AsNoTracking().FirstOrDefaultAsync(r => r.RequestTaskId == RequestTaskId);

		_viewUpdates = await (from vu in ctx.RequestUpdates
							  where vu.RequestTaskId == RequestTaskId
							  orderby vu.UpdateTimeStamp descending
								select new RequestUpdatesDTO
								{
								  UpdateId = vu.UpdateId,
								  RequestTaskId = vu.RequestTaskId,
								  UpdateTimeStamp = vu.UpdateTimeStamp,
								  UpdateDescription = vu.UpdateDescription,
								  UpdateBy = vu.UpdateBy
								}).ToListAsync();


	}

	private void CloseDialog()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}

}
