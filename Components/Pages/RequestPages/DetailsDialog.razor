@using Microsoft.EntityFrameworkCore
@using TyphoonTaskingTool.DTOs
@using TyphoonTaskingTool.Data
@using TyphoonTaskingTool.Models
@inject IDbContextFactory<TmscDbContext> DbFactory
@inherits OwningComponentBase<TmscDbContext>

<MudDialog>
	<DialogContent>
		@if (_request == null)
		{
			<MudProgressCircular Indeterminate="true"/>
		}
		else
		{
			<MudCard Class="pa-4">
				<MudCardContent>
					<MudText><strong>Task ID: </strong>@_request.RequestTaskId</MudText>
					<MudText Color="Color.Error" Class="mt-1 mb-2">
						When quoting your task ID, Please use last 8 characters
					</MudText>
					<MudDivider Class="my-2" />
					<MudText><strong>Task: </strong>@_request.RequestTitle</MudText>
					<MudText><strong>Task Description: </strong>@_request.RequestTaskDescription</MudText>
					<MudItem>
						<MudList T="string">
							@foreach (var update in _viewUpdates)
						{
							<MudListItem>
								<MudText Typo="Typo.body1">@($"{update.UpdateDescription}")</MudText>
							</MudListItem>
						}
						</MudList>
					</MudItem>
				</MudCardContent>
			</MudCard>
		}
	</DialogContent>
	<DialogActions>
		<MudButtonGroup>
			<MudIconButton Icon="@Icons.Material.TwoTone.Close"
						   Color="Color.Primary"
						   Variant="Variant.Text"
						   Size="Size.Small"
						   OnClick="CloseDialog"
						   AriaLabel="View Details" />
			<MudIconButton Icon="@Icons.Material.TwoTone.Edit"
						   Color="Color.Secondary"
						   Variant="Variant.Text"
						   Size="Size.Small"
						   OnClick="@(() => Console.WriteLine("Testing limit"))"
						   AriaLabel="Edit Request" />
			<MudIconButton Icon="@Icons.Material.TwoTone.Delete"
						   Color="Color.Secondary"
						   Variant="Variant.Text"
						   Size="Size.Small"
						   OnClick="@(() => Console.WriteLine("Soft Delete (Set Flag)"))"
						   AriaLabel="Edit Request" />
		</MudButtonGroup>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
	//Param passed from Index.razor ViewRequest()
	[Parameter] public Guid RequestTaskId { get; set; }

	private Request? _request;

	private List<RequestUpdatesDTO> _viewUpdates = new();

	//performs actions when component is first loaded.
	//Here is is setting the private _request variable (of type Request) to the returned value of RequestTaskId
	//A null check is performed within the componnet and will infinitely loop a 'loading' animation
	protected override async Task OnInitializedAsync()
	{
		await using var ctx = await DbFactory.CreateDbContextAsync();
		_request = await ctx.Requests.AsNoTracking().FirstOrDefaultAsync(r => r.RequestTaskId == RequestTaskId);

		_viewUpdates = await ctx.RequestUpdates
			.AsNoTracking()
			.Where(vu => vu.RequestTaskId == RequestTaskId)
			.OrderByDescending(vu => vu.UpdateTimeStamp)
			.Select(vu => new RequestUpdatesDTO
			{
				UpdateId = vu.UpdateId,
				RequestTaskId = vu.RequestTaskId,
				UpdateTimeStamp = vu.UpdateTimeStamp,
				UpdateDescription = vu.UpdateDescription,
				UpdateBy = vu.UpdateBy

			}).ToListAsync();
	}

	private void CloseDialog()
	{
		MudDialog.Close(DialogResult.Ok(true));
	}

}
